/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   gpt                                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mamagalh@student.42madrid.com <mamagalh    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/04/27 01:59:55 by mamagalh@st       #+#    #+#             */
/*   Updated: 2023/05/13 02:03:46 by mamagalh@st      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

void (*ft_algorithm(int **stacks, int *end)) (int **, int *, int, int) {
    static int radix_count = 0;
    static int stack = 0;
    static int move_count = 0;
    static int radix_max = 0;
	int current_move_count;

    if (radix_max == 0)
	{
        radix_max = 2;
        while (++radix_count && radix_max < end[0])
            radix_max *= 2;
        radix_max = radix_count;
        radix_count = 0;
    }
    if (radix_count < radix_max)
	{
        current_move_count = end[stack] - move_count;
        if (((stacks[stack][0] >> radix_count) & 1) && current_move_count > 0)
		{
            move_count++;
            return (&ft_rotate);
        } 
		else if (current_move_count > 0)
		{
            move_count++;
            return (&ft_push);
        } 
		else
		{
            radix_count++;
            stack = (stack + 1) % 2;
            move_count = 0;
            return ft_algorithm(stacks, end);
        }
    }
    return (NULL);
}

void (*move)(int **, int *, int, int);

while ((move = ft_algorithm(stacks, end)) != NULL) 
{
    move(stacks, &stack, end[stack], 0);
}

// SECOND VERSION

void (*ft_algorithm(int **stacks, int *stack, int *end)) (int **, int *, int, int)
{
    static int radix_count = 0;
    static int move_count = 0;
    static int radix_max = 0;
    int current_move_count;

    if (radix_max == 0)
    {
        radix_max = 2;
        while (++radix_count && radix_max < end[0])
            radix_max *= 2;
        radix_max = radix_count;
        radix_count = 0;
    }

    if (radix_count < radix_max)
    {
        current_move_count = end[*stack] - move_count;
        if (((stacks[*stack][0] >> radix_count) & 1) && current_move_count > 0)
        {
            move_count++;
            return (&ft_rotate);
        } 
        else if (current_move_count > 0)
        {
            move_count++;
            return (&ft_push);
        } 
        else
        {
            radix_count++;
            *stack = (*stack + 1) % 2;
            move_count = 0;
            return ft_algorithm(stacks, end, stack);
        }
    }
    return (NULL);
}

int stack = 0;
void (*move)(int **, int *, int, int);

while ((move = ft_algorithm(stacks, end, &stack)) != NULL) 
{
    move(stacks, &stack, end[stack], 0);
}

// RADIX ALGORYTHM

int (*ft_radix_algorythm(int **stacks, int *stack, int *end)) (int **, int, int *, int)
{
    static int radix_count = 0;
    static int move_count = 0;
    static int radix_max = 0;
    int current_move_count;

    if (radix_max == 0)
    {
        radix_max = 2;
        while (++radix_count && radix_max < end[0])
            radix_max *= 2;
        radix_max = radix_count;
        radix_count = 0;
    }

    if (radix_count < radix_max)
    {
        current_move_count = end[*stack] - move_count;
        if (((stacks[*stack][0] >> radix_count) & 1) && current_move_count > 0)
        {
            move_count++;
            return (&ft_rotate);
        } 
        else if (current_move_count > 0)
        {
            move_count++;
            return (&ft_push);
        } 
        else
        {
            radix_count++;
            *stack = (*stack + 1) % 2;
            move_count = 0;
            return ft_radix_algorythm(stacks, end, stack);
        }
    }
    return (NULL);
}

void	ft_radix_pslst(t_ps_moves **lst)
{
	int	(*move)(int **stacks, int stack, int *end, int mod);

	move = ft_radix_algorythm((*lst)->stacks, &(*lst)->stack, (*lst)->end);
	if (move)
	{
		(*lst)->move = move;
		(*lst)->next = ft_new_node(ft_arr2cpy((*lst)->stacks, 2, (*lst)->end[2]), ft_arrcpy((*lst)->end, 3));
		(*lst)->next->prev = *lst;
		(*move)((*lst)->next->stacks, (*lst)->next->stack, (*lst)->next->end, 3);
		ft_radix_pslst(&(*lst)->next);
	}
	// if no more moves to do
}

int	ft_next_node(t_ps_moves **lst, int (*(*algorythm)(int **, int *, int *))(int **, int, int *, int), int stack)
{
	int	(*move)(int **stacks, int stack, int *end, int mod);
	t_ps_moves	*last;

	move = ((*algorythm)(last->stacks, stack, last->end));
	if (move)
	{
		last = ft_dblstlast(*lst);
		last->move = move;
		last->stack = stack;
		last->next = ft_new_node(ft_arr2cpy(last->stacks, 2, last->end[2]), ft_arrcpy(last->end, 3));
		last->next->prev = *lst;
		(*move)(last->next->stacks, last->next->stack, last->next->end, 3);
		return (1);
	}
	else
		return (0);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int	ft_swap(int **stacks, int stack, int *end, int mod)
{
	int	temp;

	if (end[stack] > 2)
	{
		temp = stacks[stack][0];
		stacks[stack][0] = stacks[stack][1];
		stacks[stack][1] = temp;
		if (mod == 0)
		{
			if (stack == 0)
				write(1, "sa\n", 3);
			else
				write(1, "sb\n", 3);
		}
		else if (mod == 2)
		{
			if (ft_swap(stacks, !stack, end, 1))
				write(1, "ss\n", 3);
			//else
				//printf("Error\n");
		}
		return (1);
	}
	return (0);
}

int	ft_push(int **stacks, int stack, int *end, int mod)
{
	if (end[stack] >= 1)
	{
		end[!stack]++;
		stacks[!stack][end[!stack] - 1] = stacks[stack][0]; //stacks[!stack]
		ft_rev_rotate(stacks, !stack, end, 1);
		stacks[stack][0] = 0;
		ft_rotate(stacks, stack, end, 1);
		end[stack]--;
		if (mod == 0)
		{
			if (stack == 1)
				write(1, "pa\n", 3);
			else
				write(1, "pb\n", 3);
		}
		else if (mod == 2)
		{
			if (ft_push(stacks, !stack, end, 1))
				write(1, "pp\n", 3);
			//else
				//printf("erro");
		}
		return (1);
	}
	return (0);
}

int	ft_rotate(int **stacks, int stack, int *end, int mod)
{
	int	temp;
	int	i;

	if (end[stack] <= 1)
		return (1);
	i = -1;
	temp = stacks[stack][0];
	while (++i < end[stack])
		stacks[stack][i] = stacks[stack][i + 1];
	stacks[stack][end[stack] - 1] = temp;
	if (mod == 0)
	{
		if (stack == 0)
			write(1, "ra\n", 3);
		else
			write(1, "rb\n", 3);
	}
	else if (mod == 2)
	{
		if (ft_rotate(stacks, !stack, end, 1))
			write(1, "rr\n", 3);
	}
	return (1);
}

int	ft_rev_rotate(int **stacks, int stack, int *end, int mod)
{
	int	temp;
	int	i;

	if (end[stack] <= 1)
		return (1);
	i = end[stack] + 1;
	temp = stacks[stack][end[stack] - 1];
	while (--i > 1)
		stacks[stack][i - 1] = stacks[stack][i - 2];
	stacks[stack][0] = temp;
	if (mod == 0)
	{
		if (stack == 0)
			write(1, "rra\n", 4);
		else
			write(1, "rrb\n", 4);
	}
	else if (mod == 2)
	{
		if (ft_rev_rotate(stacks, !stack, end, 1))
			write(1, "rrr\n", 4);
	}
	return (1);
}

int ft_is_orded(int **stacks, int stack, int *end)
{
	int i;

	i = -1;
	while (++i < (end[stack] - 1))
	{
		if (ft_is_next(stacks[stack][i], stacks[stack][i + 1], stack) != 1)
			return (i + 1);
	}
	return (-1);	
}

int ft_is_next(int a, int b, int stack)
{
	// do it circular to improve
	if (a == 0 || b == 0)
		return (0);
	if (b == (a + (1 + (b * stack * (-2)))))
		return (1);
	else if (b == (a - (1 + (b * stack * (-2)))))
		return (-1);
	else
		return (0);
}

int ft_do_rotate(int **stacks, int *end)
{
    int stack_a = ft_is_next(stacks[0][0], stacks[0][end[0]], 0);
	int stack_b = ft_is_next(stacks[1][0], stacks[1][end[1]], 1);

    if (end[0] > 1 && stack_a == -1 && end[1] > 1 && stack_a == -1)
        ft_rotate(stacks, 0, end, 2);    
    else if (end[0] > 1 && stack_a == -1)
        ft_rotate(stacks, 0, end, 0);
    else if (end[1] > 1 && stack_a == -1)
        ft_rotate(stacks, 0, end, 0);
	return (1);
}

int ft_do_push(int **stacks, int *end)
{
	int stack_a = ft_is_next(stacks[0][0], stacks[1][0], 1);
	int stack_b = ft_is_next(stacks[1][0], stacks[0][0], 0);

	if (end[0] > 1 && stack_a == 1)
		ft_push(stacks, 0, end, 0);
	else if (end[1] > 1 && stack_b == 1)
		ft_push(stacks, 1, end, 2);
	else
		return (0);
	return(1);
}

int ft_do_push2(int **stacks, int *end)
{
	int stack_a = ft_is_next(stacks[0][0], stacks[1][0], 1);
	int stack_b = ft_is_next(stacks[1][0], stacks[0][0], 0);

	if (end[0] > 1 && stack_a == 1)
		ft_push(stacks, 0, end, 0);
	else if (end[1] > 1 && stack_b == 1)
		ft_push(stacks, 1, end, 2);
	else
		return (0);
	return(1);
}

int	ft_do_swap(int **stacks, int *end)
{
	int stack_a = ft_is_next(stacks[0][0], stacks[0][1], 0);
	int stack_b = ft_is_next(stacks[1][0], stacks[1][1], 1);

	if (stack_a == -1 && stack_b == -1)
		ft_swap(stacks, 0, end, 2);
	else if (stack_a == -1)
		ft_swap(stacks, 0, end, 0);
	else if (stack_b == -1)
		ft_swap(stacks, 1, end, 2);
	else
		return (0);
	return(1);
}

void	ft_algorythm2(int **stacks, int *end)
{
	int i;
    int stack_a;
	int stack_b;


	i = -1;
	while (++i < 30000 && (ft_is_orded(stacks, 0, end) != -1 || ft_is_orded(stacks, 1, end) != -1))
	{
		if (!ft_do_push(stacks, end) && !ft_do_swap(stacks, end) || !ft_do_push2(stacks, end) || !ft_do_rotate(stacks, end))
		{
            stack_a = ft_is_next(stacks[0][0], stacks[0][1], 0);
            stack_b = ft_is_next(stacks[1][0], stacks[1][1], 1);
            if ()
        }		
	}
}

//////////

int	ft_push(int **stacks, int stack, int *end, int mod)
{
	if (end[stack] >= 1)
	{
		end[!stack]++;
		stacks[!stack][end[!stack] - 1] = stacks[stack][0]; //stacks[!stack]
		ft_rev_rotate(stacks, !stack, end, 1);
		stacks[stack][0] = 0;
		ft_rotate(stacks, stack, end, 1);
		end[stack]--;
		if (mod == 0)
		{
			if (stack == 1)
				write(1, "pa\n", 3);
			else
				write(1, "pb\n", 3);
		}
		else if (mod == 2)
		{
			if (ft_push(stacks, !stack, end, 1))
				write(1, "pp\n", 3);
			//else
				//printf("erro");
		}
		return (1);
	}
	return (0);
}
void	ft_do_push(int **stacks, int stack, int *end, int **shadow)
{
	if (stack == 0)
	{
		ft_push(stacks, stack, end, 0);
		ft_push(shadow, stack, shadow[2], 3);
	}
	else
	{
		ft_push(stacks, stack, end, 0);
		free(shadow[0]);
		free(shadow[1]);
		free(shadow[2]);
		shadow[0] = NULL;
	}
}

void	ft_get_shadow(int **shadow, int *end, int start_zero, int start_one)
{
	int	i;

	shadow[0] = (int *)ft_calloc(end[0] + end[1] + 1, sizeof(int));
	shadow[1] = (int *)ft_calloc(end[0] + end[1] + 1, sizeof(int));
	if (!shadow[0] || ! shadow[1])
		exit(EXIT_FAILURE);
	shadow[2] = ft_arrcpy(end, 2);
	i = -1;
	while (++i < (end[0] + end[1]))
	{
		if (i < end[0])
			shadow[0][i] = start_zero;
		else
			shadow[0][i] = 0;
		start_zero++;
	}
	i = -1;
	while (++i < (end[0] + end[1]))
	{
		if (i < end[1])
			shadow[1][i] = start_one;
		else
			shadow[1][i] = 0;
		start_one++;
	}
}

int	ft_get_entropy(int **stacks, int stack, int *end, int **shadow)
{
	int	ref;
	int	entropy;
	int	temp;
	int	i;
	int	j;

	entropy = INT_MAX;
	temp = 0;
	j = -1;
	while (++j < end[stack])
	{	
		i = -1;
		while (++i < end[stack])
			temp += ft_abs(stacks[stack][i] - shadow[stack][i]);
		if (temp < entropy)
		{
			entropy = temp;
			ref = shadow[stack][i];
		}
		ft_rotate(shadow, stack, end, 3);
	}
	while (shadow[stack][i] != ref)
		ft_rotate(shadow, stack, end, 3);
	return (entropy);
}

void	ft_algorythm_entropy(int **stacks, int *end)
{
	int	*shadow[3];
	int entropy[2];
	int  i;

	i = -1;
	shadow[0] = NULL;
	while (++i < 20000)
	{
		if (!shadow[0])
		{
			ft_get_shadow(shadow, end, ft_lowest(stacks, 0, end), ft_lowest(stacks, 1, end));
			entropy[0] = ft_get_entropy(stacks, 0, end, shadow);
			entropy[1] = ft_get_entropy(stacks, 1, end, shadow);
		}
		if (ft_is_in(stacks, 1, end, (stacks[0][0] - 1)) >= 0)
		{
			ft_do_rotate(stacks, end, shadow, (stacks[0][0] - 1));
			ft_do_push(stacks, 1, end, shadow);
		}
		else if ((stacks[0][0] - shadow[0][0]) < 0 && (stacks[0][0] - shadow[0][0]) > (stacks[0][1] - shadow[0][1]))
			ft_swap(stacks, 0, end, 0);
		else if ((stacks[0][0] - shadow[0][0]) > 0 && (end[0] - ((end[1] * 3) / 2) + stacks[0][0]) > 0)
			ft_do_push(stacks, 0, end, shadow);
		else
			ft_do_rotate(stacks, end, shadow, stacks[0][1]);
	}
}

in those 2 functions shadow is similar to stacks, but in ft_do_push in case stack == 0 first call of function ft_push works, but the second not. why?